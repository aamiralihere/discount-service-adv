package com.retailstore.discountservice.service;import com.retailstore.discountservice.constant.ItemType;import com.retailstore.discountservice.constant.UserType;import com.retailstore.discountservice.model.*;import com.retailstore.discountservice.model.impl.BillAmountBasedDiscount;import com.retailstore.discountservice.model.impl.PercentageBasedDiscount;import com.retailstore.discountservice.repository.DiscountRepository;import com.retailstore.discountservice.request.BillRequest;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;@Service@Slf4jpublic class DiscountService {    private DiscountRepository discountRepository;    private UserService userService;    @Autowired    public DiscountService(DiscountRepository discountRepository, UserService userService) {        this.discountRepository = discountRepository;        this.userService = userService;    }    public Double calculateDiscount(BillRequest billRequest) {        User user = billRequest.getUser();        List<Item> items = billRequest.getItems();        Double totalAmount = calculateTotalAmount(billRequest);        Double billAmountBasedDiscount = calculateBillAmountBasedDiscount(totalAmount, user);        log.info("billAmountBasedDiscount = " + billAmountBasedDiscount);        Double percentageBasedDiscount = calculatePercentageBasedDiscount(user, items);        log.info("percentageBasedDiscount = " + percentageBasedDiscount);        Double returnValue = totalAmount - percentageBasedDiscount - billAmountBasedDiscount;        log.info("NetAmount = " + returnValue);        return returnValue;    }    private Double calculateBillAmountBasedDiscount(Double totalAmount, User user) {        return new BillAmountBasedDiscount().applyDiscount(totalAmount, getBillAmountBasedDiscount(user));    }    private Double calculateTotalAmount(BillRequest billRequest) {        return billRequest.getItems().stream().mapToDouble(Item::getItemPrice).sum();    }    private Double calculatePercentageBasedDiscount(User user, List<Item> items) {        Discount eligibleDiscount = getPercentageBasedDiscount(user);        Double percentageBasedDiscount = 0.0;        if(Objects.nonNull(eligibleDiscount)) {            for (Item item : items) {                if (!item.getItemType().equals(ItemType.GROCERY)) {                    percentageBasedDiscount += new PercentageBasedDiscount().applyDiscount(item.getItemPrice(), eligibleDiscount);                }            }        }        return percentageBasedDiscount;    }    private Discount getPercentageBasedDiscount(User user) {        Discount percentageBasedDiscount = null;        if(user.getUserTypes().contains(UserType.EMPLOYEE)) {            percentageBasedDiscount = getDiscountByUserType(UserType.EMPLOYEE, Boolean.TRUE);        } else if(user.getUserTypes().contains(UserType.AFFILIATE)) {            percentageBasedDiscount = getDiscountByUserType(UserType.AFFILIATE, Boolean.TRUE);        } else if (user.getUserTypes().contains(UserType.CUSTOMER) && userService.isOverTwoYearsOldCustomer(user)) {            percentageBasedDiscount = getDiscountByUserType(UserType.CUSTOMER, Boolean.TRUE);        }        return percentageBasedDiscount;    }    private Discount getBillAmountBasedDiscount(User user) {        Discount billAmountBasedDiscount = null;        if (user.getUserTypes().contains(UserType.CUSTOMER)) {            billAmountBasedDiscount = getDiscountByUserType(UserType.CUSTOMER, Boolean.FALSE);        }        return billAmountBasedDiscount;    }    public Discount createDiscount(Discount discount) {        return discountRepository.save(discount);    }    public Discount updateDiscount(Discount discount) {        return discountRepository.save(discount);    }    public Iterable<Discount> getAllDiscounts() {        return discountRepository.findAll();    }    public void deleteDiscount(Discount discount) {        discountRepository.delete(discount);    }    public Discount getDiscount(Long id) {        return discountRepository.findById(id).orElse(null);    }    public Discount getDiscountByUserType(UserType userType, Boolean isPercentageBasedDiscount) {        return discountRepository.findByDiscountUserTypeAndIsPercentageBasedDiscount(userType, isPercentageBasedDiscount);    }}